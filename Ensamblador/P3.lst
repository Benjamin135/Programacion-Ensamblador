     1                                  ;------------------------------------------------------------------------------------------------------
     2                                  ; PRACTICO DE PROGRAMACION NÂ° 3: ARRAYS Y JUMPS
     3                                  ;------------------------------------------------------------------------------------------------------
     4                                  
     5                                  segment .data
     6                                  ; Aqui se declaran las variables inicializadas
     7                                  
     8 00000000 020001000300010003-     	registro1	dw		2, 1, 3, 1, 3, 4, 9, 5, 6
     8 00000009 000400090005000600 
     9 00000012 020000000000000002-     	registro	dq		2, 2, 0, 0, 0, 0, 9, 9, 9
     9 0000001B 000000000000000000-
     9 00000024 000000000000000000-
     9 0000002D 000000000000000000-
     9 00000036 000000000000000000-
     9 0000003F 000000090000000000-
     9 00000048 000009000000000000-
     9 00000051 000900000000000000 
    10                                  
    11                                  segment .bss
    12                                  ; Aqui se declaran las variables sin inicializar
    13                                  
    14 00000000 ????                    	resultado 	resw	1
    15 00000002 ????????????????        	suma		resq	1
    16                                  
    17                                  segment .text
    18                                  global main
    19                                  main:
    20                                  ; Aqui van las instrucciones
    21                                  
    22                                  	; INDIRECTO POR REGISTRO
    23                                  
    24 00000000 4831C0                  	xor rax, rax
    25 00000003 4831DB                  	xor rbx, rbx
    26                                  	
    27 00000006 48B8-                   	mov rax, registro
    27 00000008 [1200000000000000] 
    28 00000010 48035810                	add rbx, [rax + 16]		; posicion 2
    29 00000014 48035818                	add rbx, [rax + 24]		; posicion 3
    30 00000018 48035828                	add rbx, [rax + 40]		; posicion 5
    31 0000001C 48035840                	add rbx, [rax + 64]		; posicion 8
    32                                  	
    33 00000020 48891C25[02000000]      	mov [suma], rbx
    34                                  
    35                                  	; INDIRECTO POR REGISTRO
    36 00000028 4831C0                  	xor rax, rax
    37 0000002B 4831DB                  	xor rbx, rbx
    38                                  	
    39 0000002E 48B8-                   	mov rax, registro1
    39 00000030 [0000000000000000] 
    40 00000038 66035802                	add bx, [rax + 2]		; posicion 1
    41 0000003C 6683C30A                	add bx, 10
    42 00000040 66035806                	add bx, [rax + 6]		; posicion 3
    43 00000044 6683C30A                	add bx, 10
    44 00000048 6603580E                	add bx, [rax + 14]		; posicion 7
    45 0000004C 6683C30A                	add bx, 10
    46 00000050 66035810                	add bx, [rax + 16]		; posicion 8
    47 00000054 6683C30A                	add bx, 10
    48                                  
    49 00000058 66891C25[00000000]      	mov [resultado], bx
    50                                  	
    51                                  	; BASE + INDICE
    52 00000060 4831C0                  	xor rax, rax
    53 00000063 4831DB                  	xor rbx, rbx
    54 00000066 4831C9                  	xor rcx, rcx
    55 00000069 4831F6                  	xor rsi, rsi
    56                                  	
    57 0000006C 48B8-                   	mov rax, registro1
    57 0000006E [0000000000000000] 
    58 00000076 BE02000000              	mov rsi, 2
    59 0000007B 66031C30                	add bx, [rax + rsi]		; posicion 1
    60 0000007F BE0A000000              	mov rsi, 10
    61 00000084 66031C30                	add bx, [rax + rsi]		; posicion 5
    62 00000088 BE0E000000              	mov rsi, 14
    63 0000008D 66031C30                	add bx, [rax + rsi]		; posicion 7
    64                                  	
    65 00000091 BE00000000              	mov rsi, 0
    66 00000096 66030C30                	add cx, [rax + rsi]		; posicion 0
    67 0000009A BE0C000000              	mov rsi, 12
    68 0000009F 66030C30                	add cx, [rax + rsi]		; posicion 6
    69 000000A3 BE10000000              	mov rsi, 16
    70 000000A8 66030C30                	add cx, [rax + rsi]		; posicion 8
    71                                  	
    72 000000AC 6629CB                  	sub bx, cx				
    73 000000AF 66891C25[00000000]      	mov [resultado], bx
    74                                  	
    75 000000B7 C3                      	ret
    76                                  
    77                                  
